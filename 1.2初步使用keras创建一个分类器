from keras.datasets import mnist
from keras.utils import np_utils
import numpy as np
np.random.seed(10)

(x_train,y_train),(x_test,y_test)=mnist.load_data()

x_train4D=x_train.reshape(x_train.shape[0],
                          28,28,1).astype('float32')
x_test4D=x_test.reshape(x_test.shape[0],
                        28,28,1).astype('float32')

x_train4D_normalize=x_train4D/255
x_test4D_normalize=x_test4D/255
y_train_onehot=np_utils.to_categorical(y_train)
y_test_onehot=np_utils.to_categorical(y_test)

from keras.models import Sequential
from keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPool2D


model=Sequential()

model.add(Conv2D(
    filters=16,
    kernel_size=(5,5),
    padding='same',
    input_shape=(28,28,1),
    activation='relu'
))

model.add(MaxPool2D(
    pool_size=(2,2)
))

model.add(Conv2D(
    filters=36,
    kernel_size=(5,5),
    padding='same',
    activation='relu'
))

model.add(MaxPool2D(
    pool_size=(2,2))
)

model.add(Dropout(0.25))

model.add(Flatten())

model.add(Dense(128,activation='relu'))

model.add(Dropout(0.5))

model.add(Dense(10,activation='softmax'))

print(model.summary())

model.compile(loss='categorical_crossentropy',
              optimizer='adam',metrics=['accuracy'])

train_history=model.fit(x=x_train4D_normalize,
                        y=y_train_onehot,
                        epochs=10,batch_size=300,verbose=2)
